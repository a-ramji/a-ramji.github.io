[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Anna Ramji",
    "section": "",
    "text": "Anna Ramji grew up hiking and fishing along the Eastern Sierra Nevada mountain range, where she developed an interest in ecology and the impacts of climate change on native ecosystems. During her time as an undergraduate at the University of California, Berkeley, she worked as a research assistant and laboratory manager at Caldwell Laboratory, studying stomatopods and several species of octopus. Anna enjoyed taking extra-curricular courses in Data Science, Japanese, French, and Urban Design. She earned her Bachelor of Science degree in Environmental Sciences with a dual focus in Biology and Chemistry, graduating with Honors in 2021. She has since worked to co-author a paper on body patterns of Octopus chierchiae with alumni from Caldwell Lab, which was published in PLOS One in April, 2023. Her interest in data science – particularly data visualization as a powerful tool for scientific communication – drew her to take additional courses in Python and R, and teach herself JavaScript to use Observable Notebooks. As a MEDS graduate student, she hopes to combine her expertise in environmental issues with her passion for data science and visualization to become an enthusiastic and inclusive scientific communicator in future roles. She is interested in working with ecological data, clean energy, and agroecology."
  },
  {
    "objectID": "index.html#hello",
    "href": "index.html#hello",
    "title": "Anna Ramji",
    "section": "",
    "text": "Anna Ramji grew up hiking and fishing along the Eastern Sierra Nevada mountain range, where she developed an interest in ecology and the impacts of climate change on native ecosystems. During her time as an undergraduate at the University of California, Berkeley, she worked as a research assistant and laboratory manager at Caldwell Laboratory, studying stomatopods and several species of octopus. Anna enjoyed taking extra-curricular courses in Data Science, Japanese, French, and Urban Design. She earned her Bachelor of Science degree in Environmental Sciences with a dual focus in Biology and Chemistry, graduating with Honors in 2021. She has since worked to co-author a paper on body patterns of Octopus chierchiae with alumni from Caldwell Lab, which was published in PLOS One in April, 2023. Her interest in data science – particularly data visualization as a powerful tool for scientific communication – drew her to take additional courses in Python and R, and teach herself JavaScript to use Observable Notebooks. As a MEDS graduate student, she hopes to combine her expertise in environmental issues with her passion for data science and visualization to become an enthusiastic and inclusive scientific communicator in future roles. She is interested in working with ecological data, clean energy, and agroecology."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Anna Ramji",
    "section": "Education:",
    "text": "Education:\nB.S. Environmental Sciences, University of California, Berkeley (2021)\nMaster of Environmental Data Science, University of California, Santa Barbara (2024)\n\nTheme:\n\ncustom built by Anna Ramji (2023), work in progress :)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website is under construction :)\n\n\nthis is a title\n\n\nthis is center-aligned paragraph text"
  },
  {
    "objectID": "practice-markdown.html",
    "href": "practice-markdown.html",
    "title": "Here is my level one header",
    "section": "",
    "text": "Here is my level one header\nHere is my first paragraph\nHere is my second paragraph, where you can read more about MEDS.\nThis is very important text!"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Thomas Fire\n\n\n\n\n\n\n\nQuarto\n\n\nMEDS\n\n\nPython\n\n\nGeospatial\n\n\n\n\nData analysis of AQI and Landsat data related to the Thomas Fire\n\n\n\n\n\n\nDec 13, 2023\n\n\nAnna Ramji\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/thomas-fire/thomas-fire-analysis.html",
    "href": "blog/thomas-fire/thomas-fire-analysis.html",
    "title": "Thomas Fire",
    "section": "",
    "text": "This notebook is part of my Thomas Fire analysis github repository (https://github.com/a-ramji/thomas-fire)"
  },
  {
    "objectID": "blog/thomas-fire/thomas-fire-analysis.html#importing-data",
    "href": "blog/thomas-fire/thomas-fire-analysis.html#importing-data",
    "title": "Thomas Fire",
    "section": "Importing Data",
    "text": "Importing Data\n\nAQI Data for 2017-2018\n\n\nCode\n# reading in data using the download links in EPA's AQS data (cited in the About section)\n\n# reading in 2017 county-level AQI data  \naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip')\n\n# reading in 2018 county-level AQI data\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip')\n\n\n\n\n(pre-processed) Landsat Data\n\n\nCode\n# setting file path for landsat data (NetCDF file),\n# using os() for multi-operating system compatibility\nlandsat_fp = os.path.join(os.getcwd(), 'data', 'landsat8-2018-01-26-sb-simplified.nc')\n\n#  importing the landsat data it with rioxarray\nlandsat = rioxr.open_rasterio(landsat_fp)\n\n\n\n\nCalifornia Fire Borders\n\n\nCode\n# setting file path for CA Fire Perimeters data, \n# using os() for multi-operating system compatibility\nca_fp = os.path.join(os.getcwd(), 'data', 'California_Fire_Perimeters_2017', 'California_Fire_Perimeters_2017.shp')\n\n# importing the CA Fire Perimeters 2017 shapefile from our filepath using geopandas\nca_fires = gpd.read_file(ca_fp)"
  },
  {
    "objectID": "blog/thomas-fire/thomas-fire-analysis.html#aqi-data-exploration",
    "href": "blog/thomas-fire/thomas-fire-analysis.html#aqi-data-exploration",
    "title": "Thomas Fire",
    "section": "AQI Data exploration",
    "text": "AQI Data exploration\n\n\nCode\n# currently, our 2017 and 2018 data are separate. Let's start by concatenating them:\n\n# concatenating our two years of data into one dataframe\naqi = pd.concat([aqi_17, aqi_18])\n\n# viewing the first 3 rows of our concatenated dataset\naqi.head(3)\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2017-01-01\n21\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2017-01-04\n22\nGood\nPM2.5\n01-003-0010\n1\n\n\n2\nAlabama\nBaldwin\n1\n3\n2017-01-10\n19\nGood\nPM2.5\n01-003-0010\n1\n\n\n\n\n\n\n\n\n\nCode\naqi.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nInt64Index: 654338 entries, 0 to 327536\nData columns (total 10 columns):\n #   Column                     Non-Null Count   Dtype \n---  ------                     --------------   ----- \n 0   State Name                 654338 non-null  object\n 1   county Name                654338 non-null  object\n 2   State Code                 654338 non-null  int64 \n 3   County Code                654338 non-null  int64 \n 4   Date                       654338 non-null  object\n 5   AQI                        654338 non-null  int64 \n 6   Category                   654338 non-null  object\n 7   Defining Parameter         654338 non-null  object\n 8   Defining Site              654338 non-null  object\n 9   Number of Sites Reporting  654338 non-null  int64 \ndtypes: int64(4), object(6)\nmemory usage: 54.9+ MB\n\n\nNotes: - at this stage, the dataset includes AQI data at a county-level for more states than we’re interested in for our analysis - the columns are mostly in Title Case and the datatype of information stored in the Date column is currently “object”, not a datetime object"
  },
  {
    "objectID": "blog/thomas-fire/thomas-fire-analysis.html#aqi-data-cleaning-updates",
    "href": "blog/thomas-fire/thomas-fire-analysis.html#aqi-data-cleaning-updates",
    "title": "Thomas Fire",
    "section": "AQI Data Cleaning & Updates",
    "text": "AQI Data Cleaning & Updates\nLet’s clean the column names and filter to Santa Barbara County, California.\n\n\nCode\n# cleaning up the column names to be lower_snake_case\naqi.columns = aqi.columns.str.lower().str.replace(' ','_')\n\n# let's check to see if the column names were updated properly:\nprint(aqi.columns)\n\n\nIndex(['state_name', 'county_name', 'state_code', 'county_code', 'date', 'aqi',\n       'category', 'defining_parameter', 'defining_site',\n       'number_of_sites_reporting'],\n      dtype='object')\n\n\nNice! Now, we can move on to filter our dataset down to Santa Barbara County\n\n\nCode\n# selecting rows where county_name is equal to \"Santa Barbara\"\naqi_sb = aqi[aqi.county_name == \"Santa Barbara\"]\n\n# check to see if the updates were made\n\n# print all unique data points in the county_name column\nprint(aqi_sb.county_name.unique())\n\n# show the first 3 rows of our updated df\naqi_sb.head(3)\n\n\n['Santa Barbara']\n\n\n\n\n\n\n\n\n\nstate_name\ncounty_name\nstate_code\ncounty_code\ndate\naqi\ncategory\ndefining_parameter\ndefining_site\nnumber_of_sites_reporting\n\n\n\n\n28648\nCalifornia\nSanta Barbara\n6\n83\n2017-01-01\n39\nGood\nOzone\n06-083-4003\n12\n\n\n28649\nCalifornia\nSanta Barbara\n6\n83\n2017-01-02\n36\nGood\nOzone\n06-083-4003\n11\n\n\n28650\nCalifornia\nSanta Barbara\n6\n83\n2017-01-03\n71\nModerate\nPM10\n06-083-4003\n12\n\n\n\n\n\n\n\nGreat! Now that we have our data paired down to Santa Barbara County, we can get rid of the columns before date, as they’re not providing useful information anymore.\n\n\nCode\n# using .loc to select the columns after county_code\naqi_sb = aqi_sb.loc[:,'date':'number_of_sites_reporting']\n\n# checking if our columns were dropped\nprint(aqi_sb.columns)\n\n\nIndex(['date', 'aqi', 'category', 'defining_parameter', 'defining_site',\n       'number_of_sites_reporting'],\n      dtype='object')\n\n\nPerfect. Now, let’s update the datatype of the date column to be a datetime object\n\n\nCode\n# using to_datetime from pandas to update date column to be a datetime object\naqi_sb.date = pd.to_datetime(aqi_sb.date)\n\n# checking to see if the data type was properly updated:\nprint(aqi_sb.dtypes)\n\n\ndate                         datetime64[ns]\naqi                                   int64\ncategory                             object\ndefining_parameter                   object\ndefining_site                        object\nnumber_of_sites_reporting             int64\ndtype: object\n\n\nSuccess! Let’s see what our updated dataframe looks like now:\n\n\nCode\naqi_sb.head(3)\n\n\n\n\n\n\n\n\n\ndate\naqi\ncategory\ndefining_parameter\ndefining_site\nnumber_of_sites_reporting\n\n\n\n\n28648\n2017-01-01\n39\nGood\nOzone\n06-083-4003\n12\n\n\n28649\n2017-01-02\n36\nGood\nOzone\n06-083-4003\n11\n\n\n28650\n2017-01-03\n71\nModerate\nPM10\n06-083-4003\n12\n\n\n\n\n\n\n\nThe date column seems like it could be a more useful index than our current index. Setting date to be our new index will also help us plot the AQI over time in our analysis later on.\n\n\nCode\n# updating index to the date column\naqi_sb = aqi_sb.set_index('date')\n\n\n\n\nCode\n# checking to see if the index was set properly:\naqi_sb.index\n\n\nDatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04',\n               '2017-01-05', '2017-01-06', '2017-01-07', '2017-01-08',\n               '2017-01-09', '2017-01-10',\n               ...\n               '2018-12-22', '2018-12-23', '2018-12-24', '2018-12-25',\n               '2018-12-26', '2018-12-27', '2018-12-28', '2018-12-29',\n               '2018-12-30', '2018-12-31'],\n              dtype='datetime64[ns]', name='date', length=730, freq=None)\n\n\nNow that our data is cleaned and updated, we can move on to our analysis and visualization."
  },
  {
    "objectID": "blog/thomas-fire/thomas-fire-analysis.html#geographical-context-of-data",
    "href": "blog/thomas-fire/thomas-fire-analysis.html#geographical-context-of-data",
    "title": "Thomas Fire",
    "section": "Geographical context of data",
    "text": "Geographical context of data\n\nBecause we’ll be removing the x- and y-axes later on when we make our map, it’s important to establish the geographical context of the data.\nThe data displayed in our final map are situated in Santa Barbara County, California (roughly 34.6099° N, 120.0665° W)"
  },
  {
    "objectID": "blog/thomas-fire/thomas-fire-analysis.html#landsat-raster-data-exploration",
    "href": "blog/thomas-fire/thomas-fire-analysis.html#landsat-raster-data-exploration",
    "title": "Thomas Fire",
    "section": "Landsat raster data exploration",
    "text": "Landsat raster data exploration\nLet’s begin by taking a look at some basic information about our Landsat raster data\n\n\nCode\n# exploring some general info about our landsat data\nprint('height: ', landsat.rio.height) \nprint('width:', landsat.rio.width)\nprint('resolution:', landsat.rio.resolution()) # note extra (), method vs. function\n\nprint('spatial bounding box: ')\nprint(landsat.rio.bounds(), '\\n')\n\nprint('CRS: ', landsat.rio.crs) # using the rio accessor to get the CRS, as this is a\n# xarray.Dataset\n\nlandsat.head()\n\n\nheight:  731\nwidth: 870\nresolution: (270.0, -270.0)\nspatial bounding box: \n(121170.0, 3755160.0, 356070.0, 3952530.0) \n\nCRS:  EPSG:32611\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 5, x: 5, band: 1)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 3.952e+06 3.952e+06 3.951e+06\n  * x            (x) float64 1.213e+05 1.216e+05 1.218e+05 1.221e+05 1.224e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0\nData variables:\n    red          (band, y, x) float64 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0\n    green        (band, y, x) float64 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0\n    blue         (band, y, x) float64 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0\n    nir08        (band, y, x) float64 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0\n    swir22       (band, y, x) float64 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0xarray.DatasetDimensions:y: 5x: 5band: 1Coordinates: (4)y(y)float643.952e+06 3.952e+06 ... 3.951e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., 3951585., 3951315.])x(x)float641.213e+05 1.216e+05 ... 1.224e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., 122115., 122385.])band(band)int641array([1])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0array([[[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]]])green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0array([[[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]]])blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0array([[[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]]])nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0array([[[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]]])swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0array([[[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]]])Attributes: (0)\n\n\nNote: - this data is an xarray.Dataset with 5 bands: red, green, blue, near-infrared, and shortwave infrared - we have an extra band layer, so we’ll want to drop that layer and associated coordinates before continuing with our analysis - the CRS of this raster data is EPSG:32611\nLet’s start off by using squeeze() and .drop() to get rid of the band layer and associated coordinates:\n\n\nCode\n# the landsat data has extra layers -- let's use squeeze() and drop() \n# to get rid of band and the associated coordinates\n\nprint(f\"Before squeeze:\\ndimensions {landsat.dims} \\ncoords {landsat.coords} \\n\")\n\n# using squeeze() and .drop('band') in one line \nlandsat = landsat.squeeze().drop('band')\n\nprint(f\"After squeeze:\\ndimensions {landsat.dims}\\ncoords: {landsat.coords}\")\n\n\nBefore squeeze:\ndimensions Frozen({'y': 731, 'x': 870, 'band': 1}) \ncoords Coordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0 \n\nAfter squeeze:\ndimensions Frozen({'y': 731, 'x': 870})\ncoords: Coordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\n\n\nNice! We successfully got rid of the band and associated coordinates.\nLet’s explore the CA fire border data and do whatever cleaning and updating is necessary."
  },
  {
    "objectID": "blog/thomas-fire/thomas-fire-analysis.html#ca-fire-border-data-exploration",
    "href": "blog/thomas-fire/thomas-fire-analysis.html#ca-fire-border-data-exploration",
    "title": "Thomas Fire",
    "section": "CA fire border data exploration",
    "text": "CA fire border data exploration\n\n\nCode\n# general exploration of CA border data\n\nprint('CRS: ', ca_fires.crs) # using the rio accessor to get the CRS, as this is a\n# xarray.Dataset\n\nprint(ca_fires.dtypes)\n\nca_fires.head(3)\n\n\nCRS:  epsg:3857\nindex            int64\nOBJECTID         int64\nYEAR_           object\nSTATE           object\nAGENCY          object\nUNIT_ID         object\nFIRE_NAME       object\nINC_NUM         object\nALARM_DATE      object\nCONT_DATE       object\nCAUSE          float64\nC_METHOD       float64\nOBJECTIVE      float64\nGIS_ACRES      float64\nCOMMENTS        object\nCOMPLEX_NA      object\nCOMPLEX_IN      object\nIRWINID         object\nFIRE_NUM        object\nDECADES         object\nSHAPE_Leng     float64\nSHAPE_Area     float64\ngeometry      geometry\ndtype: object\n\n\n\n\n\n\n\n\n\nindex\nOBJECTID\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\nCAUSE\nC_METHOD\nOBJECTIVE\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NA\nCOMPLEX_IN\nIRWINID\nFIRE_NUM\nDECADES\nSHAPE_Leng\nSHAPE_Area\ngeometry\n\n\n\n\n0\n19836\n41429\n2017\nCA\nCCO\nVNC\nBROOK\n00042450\n2017-05-23\n2017-05-24\n14.0\n1.0\n1.0\n10.043819\nper walked track\nNone\nNone\nNone\nNone\n2010\n1246.055781\n59473.666651\nPOLYGON ((-13229812.974 4046876.486, -13229786...\n\n\n1\n19837\n41430\n2017\nCA\nCCO\nVNC\nPACIFIC\n00075307\n2017-09-09\n2017-09-09\n14.0\n1.0\n1.0\n1.190109\nFinal Walked track. Small spot to the north east\nNone\nNone\nNone\nNone\n2010\n561.418202\n7081.369481\nPOLYGON ((-13286872.985 4074523.355, -13286895...\n\n\n2\n19838\n41431\n2017\nCA\nCCO\nVNC\nGRADE\n00054660\n2017-07-04\n2017-07-05\n14.0\n6.0\n1.0\n47.194027\nNone\nNone\nNone\nNone\nNone\n2010\n2587.259697\n279911.825212\nPOLYGON ((-13244637.580 4056332.530, -13244620...\n\n\n\n\n\n\n\nNote: - the CRS is EPSG: 3857, which does not match our landsat CRS. We’ll need to reproject this data so that the CRS match before moving on to any analysis or plotting. - there is a column called FIRE_NAME, which will be useful when selecting the Thomas Fire later on - the column names are kind of a mess!\nLet’s clean those up before moving any further…\n\n\nCode\n# updating column names: making column names in the California Fire Borders lowercase \nca_fires.columns = ca_fires.columns.str.lower()\n\n# checking to make sure we updated the names properly\nca_fires.columns\n\n\nIndex(['index', 'objectid', 'year_', 'state', 'agency', 'unit_id', 'fire_name',\n       'inc_num', 'alarm_date', 'cont_date', 'cause', 'c_method', 'objective',\n       'gis_acres', 'comments', 'complex_na', 'complex_in', 'irwinid',\n       'fire_num', 'decades', 'shape_leng', 'shape_area', 'geometry'],\n      dtype='object')\n\n\nGreat! Now let’s reproject the CRS to match our landsat data…\n\n\nCode\n# reprojecting: ca_fire crs to landsat crs (epsg:32611)\nca_fire_satcrs = ca_fires.to_crs(landsat.rio.crs)\n\n# checking to see if the CRS match:\nprint( \"CRS match:\", ca_fire_satcrs.crs == landsat.rio.crs)\n\n\nCRS match: True\n\n\nPerfect.\nFor this analysis, we’re only interested in the Thomas Fire, so let’s clip the reprojected fire boundaries data to the bounds of our landsat data, and then filter for the Thomas Fire.\n\n\nCode\n# clipping: clip CA fires to the landsat bounds (can help with processing time)\nca_fires = gpd.clip(ca_fire_satcrs, landsat.rio.bounds())\n\n\n# filtering: selecting Thomas Fire data by filtering fires data for fire_name == THOMAS\nthomas_fire_border = ca_fires.loc[ca_fires.fire_name == \"THOMAS\"]\n\n# check to see if our fitlering was successful\nprint(thomas_fire_border.fire_name.unique())\n\nthomas_fire_border.head()\n\n\n['THOMAS']\n\n\n\n\n\n\n\n\n\nindex\nobjectid\nyear_\nstate\nagency\nunit_id\nfire_name\ninc_num\nalarm_date\ncont_date\ncause\nc_method\nobjective\ngis_acres\ncomments\ncomplex_na\ncomplex_in\nirwinid\nfire_num\ndecades\nshape_leng\nshape_area\ngeometry\n\n\n\n\n436\n20274\n41874\n2017\nCA\nUSF\nVNC\nTHOMAS\n00003583\n2017-12-04\n2018-01-12\n9.0\n7.0\n1.0\n281790.875\nCONT_DATE based on Inciweb\nNone\nNone\nNone\nNone\n2010\n540531.887458\n1.681106e+09\nMULTIPOLYGON (((259241.263 3814482.913, 259193...\n\n\n\n\n\n\n\nAwesome! Now we’re ready to plot our raster data with our Thomas Fire border as a polygon layer on top."
  },
  {
    "objectID": "blog/thomas-fire/thomas-fire-analysis-blog.html",
    "href": "blog/thomas-fire/thomas-fire-analysis-blog.html",
    "title": "Thomas Fire",
    "section": "",
    "text": "This notebook is part of my Thomas Fire analysis github repository"
  },
  {
    "objectID": "blog/thomas-fire/thomas-fire-analysis-blog.html#importing-data",
    "href": "blog/thomas-fire/thomas-fire-analysis-blog.html#importing-data",
    "title": "Thomas Fire",
    "section": "Importing Data",
    "text": "Importing Data\n\n\nCode\n#======= AQI Data for 2017-2018 =======#\n\n# reading in data using the download links in EPA's AQS data (cited in the About section)\n\n# reading in 2017 county-level AQI data  \naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip')\n\n# reading in 2018 county-level AQI data\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip')\n\n\n#=====(pre-processed) Landsat Data =====#\n\n# setting file path for landsat data (NetCDF file),\n# using os() for multi-operating system compatibility\nlandsat_fp = os.path.join(os.getcwd(), 'data', 'landsat8-2018-01-26-sb-simplified.nc')\n\n#  importing the landsat data it with rioxarray\nlandsat = rioxr.open_rasterio(landsat_fp)\n\n\n# ======= California Fire Borders ======= #\n\n# setting file path for CA Fire Perimeters data, \n# using os() for multi-operating system compatibility\nca_fp = os.path.join(os.getcwd(), 'data', 'California_Fire_Perimeters_2017', 'California_Fire_Perimeters_2017.shp')\n\n# importing the CA Fire Perimeters 2017 shapefile from our filepath using geopandas\nca_fires = gpd.read_file(ca_fp)"
  },
  {
    "objectID": "blog/thomas-fire/thomas-fire-analysis-blog.html#aqi-data-analysis-visualization",
    "href": "blog/thomas-fire/thomas-fire-analysis-blog.html#aqi-data-analysis-visualization",
    "title": "Thomas Fire",
    "section": "AQI Data Analysis & Visualization",
    "text": "AQI Data Analysis & Visualization\nWe could just go straight to plotting our AQI data over time in Santa Barbara County, but it would be interesting to also show a 5-day rolling average plotted on top of it.\nIn order to make our data visualization more legible, we can compute a rolling average of our AQI over time and add that as a column for our analysis.\n\nrolling() is a method for pandas.series that provides rolling window calculations\nthe parameter '5D' indicates we want the window to be 5 days\nThis is a lazy method (think groupby), so we need to specify what we want to calculate over each window\nwe’ll also use the aggregator function mean()\n\nthis indicates that we want the mean over each window\n\n\n\n\nCode\n# computing a 5-day rolling average of AQI \n# and inserting it as a new column at the end of the dataframe\naqi_sb.insert(loc = 5,\n             column = \"five_day_average\",\n             value = aqi_sb.aqi.rolling('5D').mean())\n\n\nGreat! Now we can make a line plot showing both the daily AQI and the 5-day average (5-day average on top of the AQI), using matplotlib\n\n\nCode\n# plotting our daily aqi and five day rolling average aqi on one plot\n\nfig, ax = plt.subplots(figsize=(9,7))\n\naqi_sb.plot(ax=ax,\n            y = ['aqi', 'five_day_average'], # selecting two variables for my y-axis to auto-generate a legend\n            title = \"Daily AQI and 5-day average 2017-2018\", # updating title\n            xlabel = 'Date', # Updating x-axis label\n            ylabel = \"AQI (PM 2.5)\", # updating y-axis label\n            color = {'aqi': 'lime', # customizing colors\n                     'five_day_average':'blue'\n                    }\n           )\n\n\n&lt;AxesSubplot:title={'center':'Daily AQI and 5-day average 2017-2018'}, xlabel='Date', ylabel='AQI (PM 2.5)'&gt;\n\n\n\n\n\nNote: we can see a huge spike at December, 2017. This is when the Thomas Fire occurred."
  },
  {
    "objectID": "blog/thomas-fire/thomas-fire-analysis-blog.html#landsat-raster-data-exploration",
    "href": "blog/thomas-fire/thomas-fire-analysis-blog.html#landsat-raster-data-exploration",
    "title": "Thomas Fire",
    "section": "Landsat raster data exploration",
    "text": "Landsat raster data exploration\nLet’s begin by taking a look at some basic information about our Landsat raster data\n\n\nCode\n# exploring some general info about our landsat data\nprint('height: ', landsat.rio.height) \nprint('width:', landsat.rio.width)\nprint('resolution:', landsat.rio.resolution()) # note extra (), method vs. function\n\nprint('spatial bounding box: ')\nprint(landsat.rio.bounds(), '\\n')\n\nprint('CRS: ', landsat.rio.crs) # using the rio accessor to get the CRS, as this is a\n# xarray.Dataset\n\nlandsat.head()\n\n\nheight:  731\nwidth: 870\nresolution: (270.0, -270.0)\nspatial bounding box: \n(121170.0, 3755160.0, 356070.0, 3952530.0) \n\nCRS:  EPSG:32611\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 5, x: 5, band: 1)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 3.952e+06 3.952e+06 3.951e+06\n  * x            (x) float64 1.213e+05 1.216e+05 1.218e+05 1.221e+05 1.224e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0\nData variables:\n    red          (band, y, x) float64 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0\n    green        (band, y, x) float64 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0\n    blue         (band, y, x) float64 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0\n    nir08        (band, y, x) float64 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0\n    swir22       (band, y, x) float64 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0xarray.DatasetDimensions:y: 5x: 5band: 1Coordinates: (4)y(y)float643.952e+06 3.952e+06 ... 3.951e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., 3951585., 3951315.])x(x)float641.213e+05 1.216e+05 ... 1.224e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., 122115., 122385.])band(band)int641array([1])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0array([[[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]]])green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0array([[[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]]])blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0array([[[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]]])nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0array([[[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]]])swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0array([[[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]]])Attributes: (0)\n\n\nNote: - this data is an xarray.Dataset with 5 bands: red, green, blue, near-infrared, and shortwave infrared - we have an extra band layer, so we’ll want to drop that layer and associated coordinates before continuing with our analysis - the CRS of this raster data is EPSG:32611\nLet’s start off by using squeeze() and .drop() to get rid of the band layer and associated coordinates:\n\n\nCode\n# the landsat data has extra layers -- let's use squeeze() and drop() \n# to get rid of band and the associated coordinates\n\nprint(f\"Before squeeze:\\ndimensions {landsat.dims} \\ncoords {landsat.coords} \\n\")\n\n# using squeeze() and .drop('band') in one line \nlandsat = landsat.squeeze().drop('band')\n\nprint(f\"After squeeze:\\ndimensions {landsat.dims}\\ncoords: {landsat.coords}\")\n\n\nBefore squeeze:\ndimensions Frozen({'y': 731, 'x': 870, 'band': 1}) \ncoords Coordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0 \n\nAfter squeeze:\ndimensions Frozen({'y': 731, 'x': 870})\ncoords: Coordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\n\n\nNice! We successfully got rid of the band and associated coordinates.\nLet’s explore the CA fire border data and do whatever cleaning and updating is necessary."
  },
  {
    "objectID": "blog/thomas-fire/thomas-fire-analysis-blog.html#ca-fire-border-data-exploration",
    "href": "blog/thomas-fire/thomas-fire-analysis-blog.html#ca-fire-border-data-exploration",
    "title": "Thomas Fire",
    "section": "CA fire border data exploration",
    "text": "CA fire border data exploration\n\n\nCode\n# general exploration of CA border data\n\nprint('CRS: ', ca_fires.crs) # using the rio accessor to get the CRS, as this is a\n# xarray.Dataset\n\nprint(ca_fires.dtypes)\n\nca_fires.head(3)\n\n\nCRS:  epsg:3857\nindex            int64\nOBJECTID         int64\nYEAR_           object\nSTATE           object\nAGENCY          object\nUNIT_ID         object\nFIRE_NAME       object\nINC_NUM         object\nALARM_DATE      object\nCONT_DATE       object\nCAUSE          float64\nC_METHOD       float64\nOBJECTIVE      float64\nGIS_ACRES      float64\nCOMMENTS        object\nCOMPLEX_NA      object\nCOMPLEX_IN      object\nIRWINID         object\nFIRE_NUM        object\nDECADES         object\nSHAPE_Leng     float64\nSHAPE_Area     float64\ngeometry      geometry\ndtype: object\n\n\n\n\n\n\n\n\n\nindex\nOBJECTID\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\nCAUSE\nC_METHOD\nOBJECTIVE\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NA\nCOMPLEX_IN\nIRWINID\nFIRE_NUM\nDECADES\nSHAPE_Leng\nSHAPE_Area\ngeometry\n\n\n\n\n0\n19836\n41429\n2017\nCA\nCCO\nVNC\nBROOK\n00042450\n2017-05-23\n2017-05-24\n14.0\n1.0\n1.0\n10.043819\nper walked track\nNone\nNone\nNone\nNone\n2010\n1246.055781\n59473.666651\nPOLYGON ((-13229812.974 4046876.486, -13229786...\n\n\n1\n19837\n41430\n2017\nCA\nCCO\nVNC\nPACIFIC\n00075307\n2017-09-09\n2017-09-09\n14.0\n1.0\n1.0\n1.190109\nFinal Walked track. Small spot to the north east\nNone\nNone\nNone\nNone\n2010\n561.418202\n7081.369481\nPOLYGON ((-13286872.985 4074523.355, -13286895...\n\n\n2\n19838\n41431\n2017\nCA\nCCO\nVNC\nGRADE\n00054660\n2017-07-04\n2017-07-05\n14.0\n6.0\n1.0\n47.194027\nNone\nNone\nNone\nNone\nNone\n2010\n2587.259697\n279911.825212\nPOLYGON ((-13244637.580 4056332.530, -13244620...\n\n\n\n\n\n\n\nNote: - the CRS is EPSG: 3857, which does not match our landsat CRS. We’ll need to reproject this data so that the CRS match before moving on to any analysis or plotting. - there is a column called FIRE_NAME, which will be useful when selecting the Thomas Fire later on - the column names are kind of a mess!\nLet’s clean those up before moving any further…\n\n\nCode\n# updating column names: making column names in the California Fire Borders lowercase \nca_fires.columns = ca_fires.columns.str.lower()\n\n# checking to make sure we updated the names properly\nca_fires.columns\n\n\nIndex(['index', 'objectid', 'year_', 'state', 'agency', 'unit_id', 'fire_name',\n       'inc_num', 'alarm_date', 'cont_date', 'cause', 'c_method', 'objective',\n       'gis_acres', 'comments', 'complex_na', 'complex_in', 'irwinid',\n       'fire_num', 'decades', 'shape_leng', 'shape_area', 'geometry'],\n      dtype='object')\n\n\nGreat! Now let’s reproject the CRS to match our landsat data…\n\n\nCode\n# reprojecting: ca_fire crs to landsat crs (epsg:32611)\nca_fire_satcrs = ca_fires.to_crs(landsat.rio.crs)\n\n# checking to see if the CRS match:\nprint( \"CRS match:\", ca_fire_satcrs.crs == landsat.rio.crs)\n\n\nCRS match: True\n\n\nPerfect.\nFor this analysis, we’re only interested in the Thomas Fire, so let’s clip the reprojected fire boundaries data to the bounds of our landsat data, and then filter for the Thomas Fire.\n\n\nCode\n# clipping: clip CA fires to the landsat bounds (can help with processing time)\nca_fires = gpd.clip(ca_fire_satcrs, landsat.rio.bounds())\n\n\n# filtering: selecting Thomas Fire data by filtering fires data for fire_name == THOMAS\nthomas_fire_border = ca_fires.loc[ca_fires.fire_name == \"THOMAS\"]\n\n# check to see if our fitlering was successful\nprint(thomas_fire_border.fire_name.unique())\n\nthomas_fire_border.head()\n\n\n['THOMAS']\n\n\n\n\n\n\n\n\n\nindex\nobjectid\nyear_\nstate\nagency\nunit_id\nfire_name\ninc_num\nalarm_date\ncont_date\ncause\nc_method\nobjective\ngis_acres\ncomments\ncomplex_na\ncomplex_in\nirwinid\nfire_num\ndecades\nshape_leng\nshape_area\ngeometry\n\n\n\n\n436\n20274\n41874\n2017\nCA\nUSF\nVNC\nTHOMAS\n00003583\n2017-12-04\n2018-01-12\n9.0\n7.0\n1.0\n281790.875\nCONT_DATE based on Inciweb\nNone\nNone\nNone\nNone\n2010\n540531.887458\n1.681106e+09\nMULTIPOLYGON (((259241.263 3814482.913, 259193...\n\n\n\n\n\n\n\nAwesome! Now we’re ready to plot our raster data with our Thomas Fire border as a polygon layer on top."
  }
]